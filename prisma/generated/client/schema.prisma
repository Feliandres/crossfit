generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["postgresqlExtensions"]
  extensions      = ["(function)", "pg_trgm", "(function)"]
}

datasource db {
  provider   = "postgresql"
  //url        = env("DATABASE_URL")
  url        = env("POSTGRES_PRISMA_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model Crossfit {
  id        Int    @id @default(autoincrement())
  ruc       String @db.VarChar(13)
  nombre    String @db.VarChar(50)
  direccion String @db.VarChar(150)
  telefono  String @db.VarChar(20)
  email     String @db.VarChar(255)
}

model Plan {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique @db.VarChar(50)
  descripcion String    @db.VarChar(255)
  valor       Decimal   @db.Decimal(5, 2)
  duracion    Int
  estado      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  Member      Member[]
}

model Member {
  id                 Int          @id @default(autoincrement())
  cedula             String       @db.VarChar(13)
  nombre             String       @db.VarChar(50)
  apellido           String       @db.VarChar(50)
  email              String       @unique @db.VarChar(100)
  telefono           String       @db.VarChar(20)
  telefonoEmergencia String       @db.VarChar(20)
  fechaNacimiento    DateTime     @db.Date
  sexo               Genero
  direccion          String       @db.VarChar(255)
  nacionalidad       Nacionalidad
  fechaInscripcion   DateTime     @default(now())
  estado             Boolean?     @default(true)
  planId             Int          @default(1)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime?    @updatedAt
  Attendance         Attendance[]
  plan               Plan         @relation(fields: [planId], references: [id])
  Pay                Pay[]
}

model Attendance {
  id        Int       @id @default(autoincrement())
  fecha     DateTime  @db.Timestamp(6)
  miembroId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  miembro   Member    @relation(fields: [miembroId], references: [id])
}

model Pay {
  id        Int       @id @default(autoincrement())
  fecha     DateTime  @db.Date
  miembroId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  miembro   Member    @relation(fields: [miembroId], references: [id])
}

model User {
  id        Int       @id @default(autoincrement())
  nombre    String    @db.VarChar(50)
  apellido  String    @db.VarChar(50)
  email     String    @unique @db.VarChar(100)
  password  String    @db.VarChar(255)
  estado    Boolean?  @default(true)
  rol       Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum Role {
  USER
  ADMIN
  TRAINER
}

enum Genero {
  M
  F
}

enum Nacionalidad {
  Ecuatoriano
  Extranjero
}
